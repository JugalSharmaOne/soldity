
pragma solidity ^0.8.11;



contract Donates{



struct Emp{

uint age;

string name;


uint donates_eth;

string place;




}






event mes (address indexed  from , address to , string username); //indexed meaing is only 3 paramenter use;


mapping (address => Emp)public show_All_Info;

function Add_Info(uint _age , string  memory _name , uint _donates , string memory _place , address _to , string memory  _username)public{


show_All_Info[msg.sender]=Emp(_age , _name , show_All_Info[msg.sender].donates_eth+_donates , _place);

emit mes (msg.sender , _to , _username);


}


}








pragma solidity ^0.4.21;

contract Lottery {
  address public manager;
  address[] public players;

  constructor() public {
    manager = msg.sender;
  }

  function enter() public payable {
    require(msg.value > .01 ether);

    players.push(msg.sender);
  }

  function random() private view returns (uint) {
    return uint(keccak256(abi.encodePacked(block.difficulty, now, players)));
  }

  function pickWinner() public restricted {
    uint index = random() % players.length;

    players[index].transfer(address(this).balance);

    players = new address[](0);
  }

  function getPlayers() public view returns (address[]) {
    return players;
  }

  modifier restricted() {
    require(msg.sender == manager);
    _;
  }
}